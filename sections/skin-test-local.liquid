{{ 'skintest_local.css' | asset_url | stylesheet_tag }}

{% assign mf = page.metafields.custom.questionnaire.value %}
{% assign current_country = localization.country.iso_code %}
{%- if
   localization.country.iso_code == "AE"
   or localization.country.iso_code == "BH"
   or localization.country.iso_code == "EG"
   or localization.country.iso_code == "OM"
   or localization.country.iso_code == "KW"
   or localization.country.iso_code == "QA"
   or localization.country.iso_code == "SA"
-%}
  {% assign isArabicMarket = true %}
{% else %}
  {% assign isArabicMarket = false %}
{% endif %}

<div class="qtnr__page_container {% if localization.language.iso_code == 'ar' %}qtnr__page_container__arabic{% endif %}" data-market-handle="{{ localization.market.handle }}">
  <div class="qtnr__progress_bar_v1">
    <div class="qtnr__progress_bar"></div>
    {% comment %}
    <div class="qtnr__progress_bar__catseq__nodes">
      {% for cs in mf.category_sequence.value %}
        <div class="qtnr__progress_bar_v2__catseq__node"></div>
      {% endfor %}
    </div>
    {% endcomment %}
  </div>
  <div class="qtnr__page_header">
    <button class="qtnr__page_nav_back hidden">
      {% render 'svg-arrow-left' %}
    </button>
    {% comment %}
    <div class="qtnr__page_logo__contianer">
      <a href="/">
        <img class="qtnr__page_logo" src="{{ section.settings.logo | img_url: 'master' }}" loading="lazy">
      </a>
    </div>
    {% endcomment %}
    {% comment %}
    <div class="qtnr__progress_bar"></div>
    {% endcomment %}
  </div>
  <div class="qtnr__main_container">
    {% for q in mf.questions.value %}
      {% assign market_scope = q.market_scope.value %}
      {% assign market_restriction = q.market_restriction.value %}
      {% if market_scope == NIL
        or market_scope == nil
        or market_scope == null
        or market_scope.countries.value contains current_country
      %}
        {% unless market_restriction.countries.value contains current_country %}
          <div
            class="qtnr__question {% if q.question_id != mf.starting_question.value.question_id %}q_slide_further_right{% else %}q_slide_left{% endif %}"
            data-question-id="{{ q.question_id }}"
            data-question-index="{{ forloop.index }}"
            data-question-multiple-max-selection="{% if q.multiple_max_selection %}{{ q.multiple_max_selection }}{% else %}0{% endif %}"
            {% comment %}
            {% unless forloop.index == 1 %}
              hidden
            {% endunless %}
            {% endcomment %}
            data-question-default-answer="{% if q.type == "disclaimer" and q.default_answer %}{{ q.default_answer.value.value }}{% endif %}"
            data-question-popup-details="{{ q.popup_details | escape }}"
            data-question-market-scope="{{ market_scope.countries.value }}"
            data-question-category="{{ q.category.value.key }}"
            data-question-category-name="{{ q.category.value.name }}"
            data-question-answer-presentation="{{ q.answer_presentation }}"
            data-question-progress-label="{{ q.progress_label }}"
          >
            {% if q.image %}
              {% unless q.type == "creamLabel" %}
                <img class="qtnr__question__image" src="{{ q.image | image_url }}" loading="lazy" alt="{{ q.question_id }}" />
              {% endunless %}
            {% endif %}
            <p class="qtnr__question__main">{{ q.question }}</p>
            {% if q.description %}
              <p class="qtnr__question__desc">{{ q.description }}</p>
            {% endif %}
            {% if q.multiple_max_selection %}
              <div class="qtnr__answer__choice_counter">
                <span class="qtnr__answer__choice_selection">0</span> / <span>{{ q.multiple_max_selection }} {{ section.settings.multiple_selected_text }}</span>
              </div>
            {% endif %}
            {% if q.disclaimer %}
              <div class="qtnr__disclaimer">
                <h6><u>{{ section.settings.why_we_ask_text }}</u></h6>
                <div class="qtnr__disclaimer__text qtnr__disclaimer__text__hidden">
                  {{ q.disclaimer }}
                </div>
              </div>
            {% endif %}
            <div class="qtnr__answer__outer">
              <div class="qtnr__answer {% if q.type == "creamLabel" %}qtnr__answer__creamLabel{% endif %}">
                {% if q.type == 'single' or q.type == 'multiple' %}
                  {% for c in q.choices.value %}
                    <div
                      class="
                        qtnr__answer__item
                        qtnr__answer__choice
                        choice__styling_flex_layout
                        styling_flex_layout__{{ c.styling_flex_layout }}
                        {% if forloop.length <= 4  %}
                        qtnr__answer__choice__oneliner
                        {% else %}
                        qtnr__answer__choice__twoliner
                        {% endif %}
                        {% if q.show_checkbox == false %}
                        qtnr__answer__choice__no_checkbox
                        {% endif %}
                        {% if q.answer_presentation == 'slides' %}
                          {% if forloop.first %}
                            a_slide_left
                          {% else %}
                            a_slide_further_right
                          {% endif %}
                        {% endif %}
                        qtnr__answer__choice__white_bg
                      "
                      data-question-index="{{ forloop.index }}"
                      data-question-type="{{ q.type }}"
                      data-answer-id="{{ c.answer_id }}"
                      data-answer-value="{{ c.value }}"
                      data-answer-text="{{ c.answer }}"
                      data-answer-type="{{ c.data_type }}"
                      data-answer-leads-to="{% if c.leads_to %}{{ c.leads_to.value.question_id }}{% endif %}"
                      data-answer-isnota="{{ c.is_nota }}"
                      data-answer-icon="{% if c.icon %}true{% else %}false{% endif %}"
                      data-answer-image="{% if c.image %}true{% else %}false{% endif %}"
                    >
                      {% if c.image %}
                        <div class="qtnr__answer__choice__img hidden">
                          <img src="{{ c.image | image_url }}" loading="lazy">
                        </div>
                      {% elsif c.icon %}
                        <div class="qtnr__answer__choice__icon">
                          <img src="{{ c.icon | image_url }}" loading="lazy">
                        </div>
                      {% endif %}
                      {% if c.alternate_image %}
                        <div class="qtnr__answer__choice__img__alternate hidden">
                          <img src="{{ c.alternate_image | image_url }}" loading="lazy">
                        </div>
                      {% endif %}
                      <div class="qtnr__answer__choice__text">
                        {% if q.type == "multiple" and q.show_checkbox %}
                          <div class="qtnr__answer__choice__checkbox qtnr__answer__choice__checkbox__unchecked"></div>
                        {% endif %}
                        <div class="qtnr__answer__choice__main">
                          {% comment %}
                          {% if q.type == "multiple" and c.icon %}
                            <div class="qtnr__answer__choice__icon">
                              <img src="{{ c.icon | image_url }}" loading="lazy">
                            </div>
                          {% endif %}
                          {% endcomment %}
                          {{ c.answer }}
                          {% if q.answer_presentation == "range" %}
                            <div class="qtnr__answer__choice__range_cord"></div>
                          {% endif %}
                        </div>
                        {% if c.description %}
                          <div class="qtnr__answer__choice__desc">{{ c.description }}</div>
                        {% endif %}
                      </div>
                      
                      {% if q.answer_presentation == "slides" %}
                        <div class="qtnr__answer__item__slide__navs">
                          <button class="qtnr__answer__item__slide__navs__left">
                            <svg width="10" height="17" viewBox="0 0 10 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path fill-rule="evenodd" clip-rule="evenodd" d="M8.57117 16.6451C8.20548 16.6451 7.8398 16.5092 7.56125 16.2387L0.418899 9.30339C-0.139633 8.76105 -0.139633 7.88442 0.418899 7.34208L7.56125 0.406757C8.11978 -0.135586 9.02257 -0.135586 9.5811 0.406757C10.1396 0.949099 10.1396 1.82572 9.5811 2.36807L3.44868 8.32273L9.5811 14.2774C10.1396 14.8197 10.1396 15.6964 9.5811 16.2387C9.30255 16.5092 8.93686 16.6451 8.57117 16.6451Z" fill="#F1BF9F"/>
                            </svg>
                          </button>
                          <button class="qtnr__answer__item__slide__navs__right">
                            <svg width="10" height="17" viewBox="0 0 10 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path fill-rule="evenodd" clip-rule="evenodd" d="M1.42883 16.6451C1.06314 16.6451 0.69745 16.5092 0.418899 16.2387C-0.139633 15.6964 -0.139633 14.8197 0.418899 14.2774L6.55132 8.32273L0.418899 2.36807C-0.139633 1.82572 -0.139633 0.949099 0.418899 0.406757C0.97743 -0.135586 1.88022 -0.135586 2.43875 0.406757L9.5811 7.34208C10.1396 7.88442 10.1396 8.76105 9.5811 9.30339L2.43875 16.2387C2.1602 16.5092 1.79451 16.6451 1.42883 16.6451Z" fill="#F1BF9F"/>
                            </svg>
                          </button>
                        </div>
                        {% comment %}
                        <div class="qtnr__answer__item__slide__counter">
                          <span class="qtnr__answer__item__slide__counter__current">1</span> of <span class="qtnr__answer__item__slide__counter__length">{{ forloop.length }}</span>
                        </div>
                        {% endcomment %}
                      {% endif %}
                    </div>
                  {% endfor %}
                {% elsif q.type == 'creamLabel' %}
                  <div
                    class="qtnr__answer__item qtnr__answer__choice qtnr__answer__choice__no_border choice__styling_flex_layout styling_flex_layout__{{ c.styling_flex_layout }}"
                    data-question-index="{{ forloop.index }}"
                    data-question-type="{{ q.type }}"
                    data-answer-id=""
                    data-answer-value=""
                    data-answer-type=""
                    data-answer-leads-to="{% if c.leads_to %}{{ c.leads_to.value.question_id }}{% endif %}"
                  >
                    {% if isArabicMarket %}
                      {% if q.alternate_image %}
                        <div class="qtnr__answer__choice__img__arabic">
                          <img src="{{ q.alternate_image | image_url }}" loading="lazy">
                          <label
                            class="qtnr__answer__creamLabel__namelabel qtnr__answer__creamLabel__label__alternate qtnr__answer__creamLabel__{{ q.question_id }}"
                          ></label>
                          <input type="text" placeholder="{{ q.input_placeholder }}">
                        </div>
                      {% endif %}
                    {% else %}
                      {% if q.image %}
                        <div class="qtnr__answer__choice__img">
                          <img src="{{ q.image | image_url }}" loading="lazy">
                          <label
                            class="qtnr__answer__creamLabel__namelabel qtnr__answer__creamLabel__label qtnr__answer__creamLabel__{{ q.question_id }}"
                          ></label>
                          <input type="text" placeholder="{{ q.input_placeholder }}">
                        </div>
                      {% endif %}
                    {% endif %}
                  </div>
                {% elsif q.type == 'boolean' %}
                  {% for c in q.choices.value %}
                    <div
                      class="qtnr__answer__item qtnr__answer__choice choice__styling_flex_layout styling_flex_layout__{{ c.styling_flex_layout }}"
                      data-question-index="{{ forloop.index }}"
                      data-question-type="{{ q.type }}"
                      data-answer-value="{{ c.value }}"
                      data-answer-text="{{ c.answer }}"
                      data-answer-type="{{ c.data_type }}"
                      data-answer-leads-to="{% if c.leads_to %}{{ c.leads_to.value.question_id }}{% endif %}"
                    >
                      <div class="qtnr__answer__choice__boolean">
                        {% comment %}
                          <div class="choice__boolean__outer_circle">
                            <div class="choice__boolean__inner_circle"></div>
                          </div>
                        {% endcomment %}
                        <p>{{ c.answer }}</p>
                      </div>
                    </div>
                  {% endfor %}
                {% elsif q.type == 'input' %}
                  <div
                    class="qtnr__answer__item choice__styling_flex_layout styling_flex_layout__single"
                    data-question-id="{{ q.question_id }}"
                    data-question-index="{{ forloop.index }}"
                    data-question-type="{{ q.type }}"
                    data-question-regex="{{ q.regex }}"
                    data-answer-type="{{ c.data_type }}"
                    data-answer-leads-to="{% if c.leads_to %}{{ c.leads_to.value.question_id }}{% endif %}"
                  >
                    <input
                      type="text"
                      placeholder="{{ q.input_placeholder }}"
                      maxlength="{% if q.question_id == 'phoneNumber' %}15{% elsif q.question_id == 'age' %}2{% else %}200{% endif %}"
                      style="{% if q.question_id == "phoneNumber" and localization.country.iso_code == 'IN' %}background: url('{{ localization.country | image_url }}') no-repeat scroll 5px center;text-indent:30px;background-size:30px;{% endif %}"
                    >
                    <p class="qtnr__error_msg hidden">{{ q.regex_error_message }}</p>
                  </div>
                {% elsif q.type == 'faceScan' %}
                  <div
                    class="qtnr__answer__item choice__styling_flex_layout styling_flex_layout__single"
                    data-question-index="{{ forloop.index }}"
                    data-question-type="{{ q.type }}"
                    data-answer-type=""
                    data-answer-leads-to=""
                  >
                    {% if localization.language.iso_code == 'en' or localization.language.iso_code == 'de' %}
                      <iframe
                        id="faceScanFrame"
                        src="https://ave-and-you-selfiescan-v2.web.app/{{ localization.language.iso_code }}/session_id/21"
                        onload="faceScanFrameLoaded( this )"
                        style="width: 100%; height: 1024px; border: none;"
                        allow="camera *;microphone *"
                      ></iframe>
                    {% elsif localization.language.iso_code == 'ar' %}
                      <iframe
                        id="faceScanFrame"
                        src="https://ave-and-you-selfiescan-v2.web.app/{{ localization.language.iso_code }}-{{ localization.country.iso_code | downcase }}/session_id/21"
                        onload="faceScanFrameLoaded( this )"
                        style="width: 100%; height: 1024px; border: none;"
                        allow="camera *;microphone *"
                      ></iframe>
                    {% endif %}
                  </div>
                {% elsif q.type == 'disclaimer' %}
                  {% for c in q.choices.value %}
                    <div
                      class="qtnr__answer__item qtnr__answer__choice choice__styling_flex_layout styling_flex_layout__{{ c.styling_flex_layout }}"
                      data-question-index="{{ forloop.index }}"
                      data-question-type="{{ q.type }}"
                      data-answer-value="{{ c.value }}"
                      data-answer-text="{{ c.answer }}"
                      data-answer-type="{{ c.data_type }}"
                      data-answer-leads-to="{% if c.leads_to %}{{ c.leads_to.value.question_id }}{% endif %}"
                    >
                      <div class="qtnr__answer__choice__main hidden">{{ c.answer }}</div>
                    </div>
                  {% endfor %}
                {% elsif q.type == 'endScreen' %}
                  <div
                    class="qtnr__endscreen qtnr__answer__item qtnr__answer__choice qtnr__answer__choice__no_border choice__styling_flex_layout styling_flex_layout__single"
                    data-question-index="{{ forloop.index }}"
                    data-question-type="{{ q.type }}"
                  >
                    <button class="qtnr__endscreen__pdp_btn">VIEW RESULT</button>
                  </div>
                {% endif %}
              </div>
            </div>
            {% if q.popup_details %}
            <button class="qtnr__popup_details__btn">{% render "svg-question" %}</button>
            {% endif %}
            {% unless q.type == 'endScreen' %}
              <div class="qtnr__navigation {% if q.question_id == 'faceScan' %}hidden{% endif %}">
                {% comment %}
                  <div class="qtnr__navigation__prev">{{ section.settings.back_button_text }}</div>
                {% endcomment %}
                <div class="qtnr__navigation__next {% if q.type != "faceScan" and q.type != "disclaimer" %}qtnr__navigation__disabled{% endif %}">
                  {% comment %}
                  {{ section.settings.next_button_text }}
                  {% endcomment %}
                  {% if localization.language.iso_code == "en" %}
                    CONTINUE
                  {% elsif localization.language.iso_code == "de" %}
                    Weiter
                  {% elsif localization.language.iso_code == "ar" %}
                    يكمل
                  {% else %}
                    CONTINUE
                  {% endif %}
                  {% render 'svg-chevron-right' %}
                </div>
              </div>
            {% endunless %}
          </div>
        {% endunless %}
      {% endif %}
    {% endfor %}
  </div>
</div>

<div class="popup_details popup_details__desktop slide_down hidden">
    <div class="popup_details__x">
        {% render 'svg-x' %}
    </div>
    <div class="popup_details__content">
    </div>
</div>

{% schema %}
{
  "name": "Skin Test Local",
  "settings": [
    {
        "type": "image_picker",
        "id": "logo",
        "label": "Logo"
    },
    {
      "type": "text",
      "id": "back_button_text",
      "label": "BACK Button Text",
      "default": "BACK"
    },
    {
      "type": "text",
      "id": "next_button_text",
      "label": "NEXT Button Text",
      "default": "NEXT"
    },
    {
      "type": "text",
      "id": "multiple_selected_text",
      "label": "Multiple 'selected' text",
      "default": "selected",
      "info": "The word that comes in multiple selection counter e.g. 1/2 'selected'"
    },
    {
      "type": "text",
      "id": "why_we_ask_text",
      "label": "'WHY WE ASK' text",
      "default": "WHY WE ASK",
      "info": "Label/header text for the disclaimer section 'WHY WE ASK'"
    }
  ]
}
{% endschema %}

<script>
  let faceScanEl = document.querySelector(".qtnr__question[data-question-id='faceScan']");
  let faceScanElPrevSibling = undefined;
  if (faceScanEl) {
    faceScanElPrevSibling = faceScanEl.previousSiblingElement;
  }
  let xDown = null; // for swiping event
  let yDown = null; // for swiping event
  let categorySeqs = {{ mf.category_sequence.value | json }};
  var swipeData = undefined // for swiping event
  var ay_quiz_data = {q7: {faceScan: null}};
  var isEndScreen = false;
  var nextBtns = {};
  var storeLocale = {{ localization.language.iso_code | json }};
  var storeCountry = {{ localization.country.iso_code | json }};
  var qtnrSize = {{ mf.questions.value | json }};
  var firstQuestion = {{ mf.starting_question.value.question_id | json }};
  var previousQuestion = {{ mf.starting_question.value.question_id | json }};
  var currentQuestion = {{ mf.starting_question.value.question_id | json }};
  var testJourney = [];
  var phonePrefixes = {
    "IN": "+91"
  }
  ay_quiz_data["q7"]["locale"] = storeLocale;
  ay_quiz_data["q7"]["country"] = storeCountry;

  window.dataLayer = window.dataLayer || [];

  function gtmSkinTestStart() {
    window.appStart = function(){
      window.eventHandle = function(){
        dataLayer.push({ ecommerce: null });  // Clear the previous ecommerce object.
        dataLayer.push({
          event: "skin_test_started",
        });
      };
      eventHandle();
    }
    appStart();
  }
  function gtmSkinTestFinish() {
    window.appStart = function(){
      window.eventHandle = function(){
        dataLayer.push({ ecommerce: null });  // Clear the previous ecommerce object.
        dataLayer.push({
          event: "skin_test_finished",
        });
      };
      eventHandle();
    }
    appStart()
  }
  function gtmSkinTestAnswer(questionIdx, questionId, answerValue, answerText) {
    window.appStart = function(){
      window.eventHandle = function(){
        dataLayer.push({ ecommerce: null });  // Clear the previous ecommerce object.
        dataLayer.push({
          event: "skin_test_answered",
          ecommerce: {
            question_step: `Step ${questionIdx}`,
            question_id: questionId,
            answer_value: answerValue,
            answer_text: answerText,
          }
        });
      };
      eventHandle();
    }
    appStart()
  }
  function gtmSkinTestTrack(questionIdx, questionId, answerValue, answerText, questionStep) {
    if (questionIdx === "1") {
      gtmSkinTestStart();
      gtmSkinTestAnswer(questionIdx, questionId, answerValue, answerText);
    } else if (questionIdx === "37") {
      gtmSkinTestAnswer(questionIdx, questionId, answerValue, answerText);
      gtmSkinTestFinish();
    } else {
      gtmSkinTestAnswer(questionIdx, questionId, answerValue, answerText);
    }
  }
  function bringScreenToTop() {
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  }
  // function for detecting and catching faceScan results
  function faceScanFrameLoaded(e) {
    let frameIsLoaded = false;
    window.addEventListener( "message", ( event ) => {
      if (event.origin.includes("metrics-staging-1.web.app") || event.origin.includes("ave-and-you-selfiescan-v2.web.app") || event.origin.includes("https://ay-skintest.web.app")) {
        const { data } = event;
        console.log("faceScanFrameData", data);
        if( data.label == 'skin_id' ) {
          //skinId = data.request.id;
        }
        if( data.label == 'results' ) {
          if (data.request) {
            if (faceScanEl) {
              let navigationEl = faceScanEl.querySelector(".qtnr__navigation");
              if (navigationEl) {
                navigationEl.classList.remove('hidden');
              }
            }
          }
          ay_quiz_data["q7"]["faceScan"] = data.request;
        }
        if( data.label === 'skip' ) {
          bringScreenToTop()
          testJourney.push("faceScan");
          previousQuestion = 'faceScan';
          console.log("Skip facescan");
          console.log("faceScanEl", faceScanEl);
          if (faceScanEl) {
            faceScanEl.classList.remove("q_slide_left");
            faceScanEl.classList.add("q_slide_further_left");
            faceScanEl.nextElementSibling.classList.remove("q_slide_further_right");
            faceScanEl.nextElementSibling.classList.add("q_slide_left");
            currentQuestion = faceScanEl.nextElementSibling.getAttribute("data-question-id");
            let answerEl = faceScanEl.querySelector(".qtnr__answer__item");
            if (answerEl) {
              progressBar(answerEl, "forward");
            }
          }
        }
        if( data.label === 'face_scan_loaded' ) {
          frameIsLoaded = true;
        }
        
      }

      if (frameIsLoaded) {
        if (faceScanElPrevSibling) {
          faceScanElPrevSibling.insertAfter(faceScanEl);
        }
      } else {
        faceScanEl.remove()
      }
    });
  }
  function enforcePhoneInput(e, prevVal, numPrefix, nextBtn) {
    if (e.target.value.length <= 2) {
      e.target.value = e.target.value.replace(/\D+/g, '')
      .replace(/^(\d{1})/, numPrefix);
    }
    if (e.target.value.length >= 13 && e.target.value.length <= 15) {
      e.target.value = e.target.value.replace(e.target.value, currVal)
      nextBtn.classList.remove('qtnr__navigation__disabled');
    } else {
      nextBtn.classList.add('qtnr__navigation__disabled');
    }
  }
  function toggleDisclaimer(disclaimerEl) {
    if (disclaimerEl) {
      if (disclaimerEl.classList.contains("qtnr__disclaimer__text__hidden")) {
        disclaimerEl.classList.remove("qtnr__disclaimer__text__hidden");
      } else {
        disclaimerEl.classList.add("qtnr__disclaimer__text__hidden");
      }
    }
  }
  function handleTouchStart(evt) {
    let touches = evt.touches || // browser API
         evt.originalEvent.touches;
    xDown = touches[0].clientX;                                      
    yDown = touches[0].clientY;
  }
  function getSwipeDirection(evt) {
    let dir = undefined;

    if ( ! xDown || ! yDown ) {
        return;
    }

    var xUp = evt.touches[0].clientX;                                    
    var yUp = evt.touches[0].clientY;

    var xDiff = xDown - xUp;
    var yDiff = yDown - yUp;
                                                                         
    if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/
        if ( xDiff > 0 ) {
            dir = "left";
        } else {
            dir = "right";
        }                       
    } else {
        if ( yDiff > 0 ) {
            dir = "down";
        } else { 
            dir = "up";
        }                                                                 
    }
    /* reset values */
    // xDown = null;
    // yDown = null; 
    
    return {
      direction: dir,
      xPoint: xUp,
    };
  }
  function buildCategoryProgress() { // used for categorized progress bar (progress bar v2)
    if (categorySeqs && categorySeqs.length > 0) {
      let progressBarEl = document.querySelector(".qtnr__progress_bar");
      if (progressBarEl) {
        categorySeqs.map((seq, i) => {
          let progressContainer = document.createElement('div');
          let progress = document.createElement('div');
          let progressHead = document.createElement('div');
          let progressTail = document.createElement('div');
          let relativeQuestionEls = document.querySelectorAll(`[data-question-category='${seq.key}'`);

          progressContainer.setAttribute("data-progress-category-key", seq.key);
          progressContainer.setAttribute("data-progress-category-name", seq.name);
          
          progressHead.classList.add("qtnr__progress_bar__progress__head");
          progressHead.setAttribute("data-progress-head-category", seq.key);
          
          progressTail.classList.add("qtnr__progress_bar__progress__tail");
          
          progress.classList.add("qtnr__progress_bar__progress__progress");
          
          progressContainer.style.display = "flex";
          progressContainer.style.justifyContent = "space-between";
          progressContainer.style.width = `${100 / categorySeqs.length}%`;
          
          progress.classList.add("qtnr__progress");
          progress.style.width = `100%`;
          progress.style.display = `flex`;
          if (relativeQuestionEls) {
            relativeQuestionEls.forEach((el) => {
              let innerProgress = document.createElement("div");
              innerProgress.setAttribute("data-inner-progress-question-id", el.getAttribute("data-question-id"));
              innerProgress.setAttribute("data-inner-progress-category", seq.key);
              innerProgress.style.width = `${100 / relativeQuestionEls.length}%`;
              progress.appendChild(innerProgress);
            });
          }
          
          progressHead.style.width = "10px";
          progressHead.style.height = "10px";
          progressHead.style.borderRadius = "100px";
          progressHead.style.background = "#DCDCDC";
          progressHead.style.marginTop = "-3px";
          
          progressTail.style.width = "10px";
          progressTail.style.height = "10px";
          progressTail.style.borderRadius = "100px";
          progressTail.style.background = "#DCDCDC";
          progressTail.style.marginTop = "-3px";

          if (i >= 0 && i < categorySeqs.length) {
            progressContainer.appendChild(progressHead);
          }
          progressContainer.appendChild(progress);
          if (i === (categorySeqs.length - 1)) {
            progressContainer.appendChild(progressTail);
          }
          progressBarEl.appendChild(progressContainer)
        });
      }
    }
  }
  function initializeProgressBar() {
    let progressBarEl = document.querySelector(".qtnr__progress_bar");
    let questionEls = document.querySelectorAll(".qtnr__question");
    if (questionEls) {
      let width = 100 / (questionEls.length + 3);
      let firstQ = questionEls[0];
      let q_progressLabel = firstQ.getAttribute("data-question-progress-label");
      let progressEl = document.createElement("div");
      let progressHeadEl = document.createElement("div");
      let progressHeadLabelEl = document.createElement("div");
      progressEl.classList.add("qtnr__progress");
      progressEl.style.width = `${width}%`;
      progressHeadEl.classList.add("qtnr__progress__head");
      progressHeadEl.classList.add("qtnr__progress__head__current");
      progressHeadLabelEl.classList.add("qtnr__progress__head__label");
      progressHeadLabelEl.classList.add("qtnr__progress__head__label__current");
      progressHeadLabelEl.innerText = q_progressLabel;
      progressEl.appendChild(progressHeadEl);
      progressEl.appendChild(progressHeadLabelEl);
      progressBarEl.appendChild(progressEl);
    }
  }
  function progressBar(answerEl, direction) {
    let questionEls = document.querySelectorAll(".qtnr__question");
    let progressBarEl = document.querySelector(".qtnr__progress_bar");
    let progressEls = progressBarEl.querySelectorAll(".qtnr__progress");
    if (direction === "forward") {
      let questionEl = answerEl.closest(`.qtnr__question`);
      let nextEl = questionEl.nextElementSibling;
      let q_progressLabel = nextEl ? nextEl.getAttribute("data-question-progress-label") : "";
      let leadsTo = answerEl.getAttribute("data-answer-leads-to");
      let questionLeadEl = document.createElement("div");

      // hide previous heads
      if (progressEls) {
        progressEls.forEach((el) => {
          let progressHeadCurrentEl = el.querySelector(".qtnr__progress__head__current");
          let progressHeadLabelCurrentEl = el.querySelector(".qtnr__progress__head__label__current");
          if (progressHeadCurrentEl) {
            progressHeadCurrentEl.classList.remove("qtnr__progress__head__current");
            progressHeadLabelCurrentEl.classList.remove("qtnr__progress__head__label__current");
          }
        });
      }
      
      progress = parseInt(questionEl.getAttribute("data-question-index"));
      let _progress = 0;
      if (leadsTo) {
        questionLeadEl = document.querySelector(`.qtnr__question[data-question-id='${leadsTo}']`);
        _progress = parseInt(questionLeadEl.getAttribute("data-question-index"));
        // progress = _progress - progress;
      }
      if (questionEl) {
        if (leadsTo) {
          for (let i = progress; i <= _progress; i++) {
            console.log("III", i)
            console.log("QELS LEN", questionEls.length)
            let width = 100 / (questionEls.length + 3);
            let progressEl = document.createElement("div");
            let progressHeadEl = document.createElement("div");
            let progressHeadLabelEl = document.createElement("div");
            progressEl.setAttribute("data-question-id", questionEl.getAttribute("data-question-id"));
            progressEl.setAttribute("data-leads-to", leadsTo);
            progressEl.setAttribute("data-progress-value", progress);
            progressEl.classList.add("qtnr__progress");
            progressEl.style.width = `${width}%`;
            progressHeadEl.classList.add("qtnr__progress__head");
            progressHeadLabelEl.classList.add("qtnr__progress__head__label");
            q_progressLabel = questionLeadEl ? questionLeadEl.getAttribute("data-question-progress-label") : "";
            progressHeadLabelEl.innerText = q_progressLabel;
            if (i === parseInt(questionLeadEl.getAttribute("data-question-index"))) {
              progressHeadEl.classList.add("qtnr__progress__head__current");
              progressHeadLabelEl.classList.add("qtnr__progress__head__label__current");
              progressEl.appendChild(progressHeadEl);
              progressEl.appendChild(progressHeadLabelEl);
            }
            // if (nextEl) {
            // }
            progressBarEl.appendChild(progressEl);
          }
        } else {
          let width = 100 / (questionEls.length + 3);
          let progressEl = document.createElement("div");
          let progressHeadEl = document.createElement("div");
          let progressHeadLabelEl = document.createElement("div");
          progressEl.classList.add("qtnr__progress");
          progressEl.style.width = `${width}%`;
          progressHeadEl.classList.add("qtnr__progress__head");
          progressHeadEl.classList.add("qtnr__progress__head__current");
          progressHeadLabelEl.classList.add("qtnr__progress__head__label");
          progressHeadLabelEl.classList.add("qtnr__progress__head__label__current");
          progressHeadLabelEl.innerText = q_progressLabel;
          progressEl.appendChild(progressHeadEl);
          progressEl.appendChild(progressHeadLabelEl);
          progressBarEl.appendChild(progressEl);
        }
      }
    } else {
      let progressEls = progressBarEl.querySelectorAll(".qtnr__progress");
      let leadsToCount = 0;
      if (progressEls) {
        progressEls.forEach((el) => {
          if (el.getAttribute("data-question-id") === currentQuestion) {
            leadsToCount += 1;
          }
        });
      }
      
      if (leadsToCount === 0) {
        if (progressBarEl.children.length > 1) {
          progressBarEl.removeChild(progressBarEl.lastChild);
          let currentProgressEl = progressBarEl.lastChild;
          if (currentProgressEl) {
            let progressHeadCurrentEl = currentProgressEl.querySelector(".qtnr__progress__head");
            let progressHeadLabelCurrentEl = currentProgressEl.querySelector(".qtnr__progress__head__label");
            if (progressHeadCurrentEl && progressHeadLabelCurrentEl) {
              progressHeadCurrentEl.classList.add("qtnr__progress__head__current");
              progressHeadLabelCurrentEl.classList.add("qtnr__progress__head__label__current");
            }
          }
        } else {
          progressBarEl.innerHTML = null;
        }
      } else {
        for (let i = 0; i < leadsToCount; i++) {
          if (progressBarEl.children.length > 1) {
            progressBarEl.removeChild(progressBarEl.lastChild);
            let currentProgressEl = progressBarEl.lastChild;
            if (currentProgressEl) {
              let progressHeadCurrentEl = currentProgressEl.querySelector(".qtnr__progress__head");
              let progressHeadLabelCurrentEl = currentProgressEl.querySelector(".qtnr__progress__head__label");
              if (progressHeadCurrentEl && progressHeadLabelCurrentEl) {
                progressHeadCurrentEl.classList.add("qtnr__progress__head__current");
                progressHeadLabelCurrentEl.classList.add("qtnr__progress__head__label__current");
              }
            }
          } else {
            progressBarEl.innerHTML = null;
          }
        }
      }
    }
  }
  // this function switches to male or female images
  // for the skin type question if based on the answer to the gender question
  function handleDynamicSkinTypeImage(questionEl, showMain) {
    if (questionEl) {
      let imageEls = document.querySelectorAll(".qtnr__answer__choice__img");
      let alterImageEls = document.querySelectorAll(".qtnr__answer__choice__img__alternate");
      if (imageEls) {
        imageEls.forEach((img) => {
          if (showMain) {
            img.classList.remove("hidden");
          } else {
            img.classList.add("hidden");
          }
        });
      }
      if (alterImageEls) {
        alterImageEls.forEach((img) => {
          if (!showMain) {
            img.classList.remove("hidden");
          } else {
            img.classList.add("hidden");
          }
        });
      }
    }
  }
  
  window.addEventListener("DOMContentLoaded", async (event) => {
    var faceScanFrame = document.querySelector("#faceScanFrame");
    var topBackBtn = document.querySelector(".qtnr__page_nav_back");
    var popupDetailsEl = document.querySelector(".popup_details");
    var multiAnswerQuestions = {};
    var savedData = {};
    var skinId = null;
    var matchId = null;
    var answerAccessToken = null;
    let progress = 1;

    function loadPopupDetails() {
      let questionEl = document.querySelector(`.qtnr__question[data-question-id='${currentQuestion}']`)
      let popupContentEl = document.querySelector(".popup_details__content");
      let content = questionEl.getAttribute("data-question-popup-details");
      if (content) {
        popupContentEl.innerHTML = content;
      }
    }

    function doesQuestionTriggerFirstApiCall(questionId) {
      let triggerQtnId = {{ mf.save_trigger_question.value.question_id | json }};
      if (triggerQtnId) {
        if (triggerQtnId === questionId) {
          saveSkinTestData()
        }
      }
    }

    function doesQuestionTriggerSecondApiCall(questionId) {
      let triggerQtnId = {{ mf.save_remaining_trigger_question.value.question_id | json }};
      if (triggerQtnId) {
        if (triggerQtnId === questionId) {
          saveRemainingSkinTestData()
        }
      }
    }

    function saveSkinTestData() {
      let skinTestData = {};
      let qtnr = JSON.parse(window.localStorage.getItem("questionnaire"));
      
      if (qtnr && qtnr.q7 && Object.keys(qtnr.q7).length > 0) {
        skinTestData["main"] = false;
        skinTestData["email"] = qtnr["q7"]["email"];
        skinTestData["firstName"] = qtnr["q7"]["firstName"];
        skinTestData["lastName"] = "";
        skinTestData["quiz"] = {};
        skinTestData["quiz"]["questionnaireId"] = "q7";
        skinTestData["quiz"]["answers"] = qtnr["q7"];
        skinTestData["quiz"]["utmParams"] = {};
        skinTestData["quiz"]["country"] = {{ localization.country.iso_code | json }};
        skinTestData["quiz"]["locale"] = {{ localization.language.iso_code | json }};
        skinTestData["quiz"]["isDirectPurchase"] = false;
        skinTestData["isDirectPurchase"] = false;
        skinTestData["creamVersion"] = 21;
        skinTestData["featureRecMS"] = true; // signals calculation of features and recommendations as pubsub operation

        var tries = 0;

        fetch("{{ mf.save_api_url }}", {
          method: "POST",
          headers: { "Content-Type": "application/json"},
          body: JSON.stringify(skinTestData),
        })
        .then((res) => res.json())
        .then((res) => {
          // let restData = JSON.parse(res);
          skinId = res.skinId;
          matchId = res.matchId;
          answerAccessToken = res.answerAccessToken;
        })
        .catch((err) => {
          console.log("saveData error:", err);
          setTimeout( function() {
            if (tries < 5) {
              console.log("REATTEMPT: Initially saving skin test data");
              tries++;
              saveSkinTestData
            }
          }, 500);
        });
      }
    }

    function saveRemainingSkinTestData() {
      let skinTestData = {};
      let qtnr = JSON.parse(window.localStorage.getItem("questionnaire"));
      
      if (qtnr && qtnr.q7 && Object.keys(qtnr.q7).length > 0) {
        skinTestData["skinId"] = skinId;
        skinTestData["matchId"] = matchId;
        skinTestData["answerAccessToken"] = answerAccessToken;
        skinTestData["scent"] = "NoFragrance" //qtnr["q7"]["scent"];
        skinTestData["nightCremeScent"] = "NoFragrance" //qtnr["q7"]["nightCremeScent"];
        skinTestData["main"] = true;
        skinTestData["DirectPurchasein"] = false;
        skinTestData["answers"] = {};
        skinTestData["answers"]["product"] = {"name": qtnr["q7"]["product"]["name"]};
        skinTestData["answers"]["nightCremeProduct"] = {"name": qtnr["q7"]["nightCremeProduct"]["name"]};
        skinTestData["creamVersion"] = 21;

        var tries = 0;
        
        fetch("{{ mf.save_remaining_api_url }}", {
          method: "POST",
          headers: { "Content-Type": "application/json"},
          body: JSON.stringify(skinTestData),
        })
        .then((res) => res.json())
        .then((res) => {
          answerAccessToken = res;
        })
        .catch((err) => {
          console.log("saveRemainingData error:", err);
        });
      }
    }

    async function goBackToQuestion(questionId) {
      console.log("PREV QUEST", previousQuestion);
      console.log("CURRENT QUEST", currentQuestion);
      let prevQuestionDiv = document.querySelector(`.qtnr__question[data-question-id="${questionId}"]`);
      let currQuestionDiv = document.querySelector(`.qtnr__question[data-question-id="${currentQuestion}"]`);
      if (prevQuestionDiv && currQuestionDiv) {
        // prevQuestionDiv.removeAttribute("hidden");
        // currQuestionDiv.setAttribute("hidden", true);
        prevQuestionDiv.classList.remove("q_slide_further_left");
        prevQuestionDiv.classList.add("q_slide_right");
        currQuestionDiv.classList.remove("q_slide_left");
        currQuestionDiv.classList.add("q_slide_further_right");
        let journeyIndex = testJourney.indexOf(questionId);
        if (journeyIndex > -1) {
          testJourney.splice(journeyIndex, 1);
          currentQuestion = previousQuestion;
          if (testJourney.length > 0) {
            previousQuestion = testJourney[testJourney.length - 1];
          } else {
            previousQuestion = qtnrSize[0].question_id;
          }
        }
      }
      console.log("TEST JOURNEY", testJourney);
      if (topBackBtn) {
        if (testJourney.length <= 0) {
          topBackBtn.classList.add("hidden");
        }
      }
    }

    function handleMultipleAnswerCounter(questionEl, val) {
      let selectionCounterEl = questionEl.querySelector(".qtnr__answer__choice_counter");
      let selectionCounterSelectionEl = null;
      if (selectionCounterEl) {
        selectionCounterSelectionEl = selectionCounterEl.querySelector(".qtnr__answer__choice_selection");
      }
      if (selectionCounterSelectionEl) {
        selectionCounterSelectionEl.innerText = val;
      }
    }

    function handleMultipleAnswers(questionEl, answerEl, answerValue, questionId, questionMultipleMaxSelection, isMultiAnswerQuestionsStore, nextBtn, isnota, a_text) {
      if (answerEl && answerValue && questionId) {
        let checkbox = answerEl.querySelector(".qtnr__answer__choice__checkbox");
        // 1) manage selections
        if (answerEl.classList.contains("multiple-selected")) {
          answerEl.classList.remove("multiple-selected");
          checkbox && checkbox.classList.remove("qtnr__answer__choice__checkbox__checked");
          checkbox && checkbox.classList.add("qtnr__answer__choice__checkbox__unchecked");
          if (isMultiAnswerQuestionsStore) {
            multiAnswerQuestions[`${questionId}`] = multiAnswerQuestions[`${questionId}`].filter((i) => i !== answerValue);
          } else {
            multiAnswerQuestions[`${questionId}`] = []
          }
          if (nextBtns[questionId]) {
            nextBtns[questionId].a_text = nextBtns[questionId].a_text.filter((v) => v!== answerEl.getAttribute("data-answer-text"));
          }
          handleMultipleAnswerCounter(questionEl, multiAnswerQuestions[`${questionId}`].length);
        } else {
          if (isMultiAnswerQuestionsStore) {
            if (questionMultipleMaxSelection && multiAnswerQuestions[`${questionId}`].length >= questionMultipleMaxSelection) {
              return;
            }
          }
          answerEl.classList.add("multiple-selected");
          checkbox && checkbox.classList.add("qtnr__answer__choice__checkbox__checked");
          checkbox && checkbox.classList.remove("qtnr__answer__choice__checkbox__unchecked");
          if (nextBtns[questionId]) {
            nextBtns[questionId].a_text.push(answerEl.getAttribute("data-answer-text"));
          }
          if (isMultiAnswerQuestionsStore) {
            if (!multiAnswerQuestions[`${questionId}`].includes(answerValue)) {
              multiAnswerQuestions[`${questionId}`].push(answerValue);
            }
          } else {
            multiAnswerQuestions[`${questionId}`] = [];
            multiAnswerQuestions[`${questionId}`].push(answerValue);
          }
          handleMultipleAnswerCounter(questionEl, multiAnswerQuestions[`${questionId}`].length);
        }
        
        // 2) enable/disable NEXT button based on number of selected answers
        if (multiAnswerQuestions[`${questionId}`].length > 0) {
          nextBtn.classList.remove("qtnr__navigation__disabled");
        } else {
          nextBtn.classList.add("qtnr__navigation__disabled");
        }
        // 3) update quiz data
        // 4) manage if answer is nota
        if (isnota) {
          let answerSiblings = questionEl.querySelectorAll(".qtnr__answer__item");
          if (answerSiblings) {
            answerSiblings.forEach((el) => {
              let el_checkbox = el.querySelector(".qtnr__answer__choice__checkbox");
              if (el.classList.contains("multiple-selected")) {
                el.classList.remove("multiple-selected");
                el_checkbox && el_checkbox.classList.remove("qtnr__answer__choice__checkbox__checked");
                el_checkbox && el_checkbox.classList.add("qtnr__answer__choice__checkbox__unchecked");
              }
            });
          }
          answerEl.classList.add("multiple-selected");
          checkbox && checkbox.classList.add("qtnr__answer__choice__checkbox__checked");
          checkbox && checkbox.classList.remove("qtnr__answer__choice__checkbox__unchecked");
          multiAnswerQuestions[`${questionId}`] = [];
          multiAnswerQuestions[`${questionId}`].push(answerValue);
          if (nextBtns[questionId]) {
            nextBtns[questionId].a_text = [answerEl.getAttribute("data-answer-text")];
          }
        } else {
          let isNotaEl = questionEl.querySelector('[data-answer-isnota="true"]');
          if (isNotaEl) {
            let isNotEl_checkbox = isNotaEl.querySelector(".qtnr__answer__choice__checkbox");
            isNotaEl.classList.remove("multiple-selected");
            isNotEl_checkbox && isNotEl_checkbox.classList.remove("qtnr__answer__choice__checkbox__checked");
            isNotEl_checkbox && isNotEl_checkbox.classList.add("qtnr__answer__choice__checkbox__unchecked");
            let answerToRemove = multiAnswerQuestions[`${questionId}`].indexOf(isNotaEl.getAttribute("data-answer-value"));
            if (answerToRemove !== -1) {
              multiAnswerQuestions[`${questionId}`].splice(answerToRemove, 1);
              if (nextBtns[questionId]) {
                nextBtns[questionId].a_text = nextBtns[questionId].a_text.filter((v) => v!== isNotaEl.getAttribute("data-answer-text"));
                if (!nextBtns[questionId].a_text.includes(answerEl.getAttribute("data-answer-text"))) {
                  nextBtns[questionId].a_text.push(answerEl.getAttribute("data-answer-text"));
                }
              }
            }
          }
        }
        if (nextBtns[questionId]) {
          nextBtns[questionId].a_value = multiAnswerQuestions[`${questionId}`];
        }
        ay_quiz_data["q7"][`${questionId}`] = multiAnswerQuestions[`${questionId}`];
      }
    }

    function trackJourney(questionEl, questionId) {
      if (questionEl) {
        previousQuestion = questionId;
        if (!testJourney.includes(questionId)) {
          testJourney.push(questionId)
        }
      }
      loadPopupDetails()
    }

    function showNextQuestion(questionEl, answerEl) {
      let leadsTo = answerEl.getAttribute("data-answer-leads-to");
      if (leadsTo) {
        let questionToJump = document.querySelector(`.qtnr__question[data-question-id="${leadsTo}"]`);
        // questionEl.setAttribute("hidden", true);
        // questionToJump.removeAttribute("hidden");
          questionEl.classList.remove("q_slide_left");
          questionEl.classList.add("q_slide_further_left");
          questionToJump.classList.remove("q_slide_further_right");
          questionToJump.classList.add("q_slide_left");
          if (leadsTo === "dayCreamLabel" || leadsTo === "dayCreamLabel") {
            questionToJump.classList.remove("qa_slide_up");
          }
        currentQuestion = leadsTo;
      } else {
          let nextQuestionDiv = questionEl.nextElementSibling;
          // nextQuestionDiv.removeAttribute("hidden");
          currentQuestion = nextQuestionDiv.getAttribute("data-question-id");
          // questionEl.setAttribute("hidden", true);
          questionEl.classList.remove("q_slide_left");
          questionEl.classList.add("q_slide_further_left");
          nextQuestionDiv.classList.remove("q_slide_further_right");
          nextQuestionDiv.classList.add("q_slide_left");
          if (currentQuestion === "dayCreamLabel" || currentQuestion === "nightCreamLabel") {
            let nextQuestionDivAnswerChoiceEl = nextQuestionDiv.querySelector(".qtnr__answer__choice");
            nextQuestionDivAnswerChoiceEl.classList.add("qa_slide_up");
          }
      }
    }

    function goToQuestion(questionEl, answerEl, questionId, questionType, answerValue, answerType) {
      let formattedAnswer = answerValue;

      if (answerType === "integer") {
        formattedAnswer = parseInt(answerValue);
      }

      showNextQuestion(questionEl, answerEl);
      
      // Here, the following questionType records the answers
      // somewhere else instead of here:
      // 1. input - handled separately through "change" event on the input field
      // 2. faceScan - handled separately through frameLoaded() where a postMessage event is monitored for the faceScan app result
      // 3. multiple - handled separately through handleMultipleChoices() after user is done selecting one or more answers
      if (questionType && questionType !== "input" && questionType !== "faceScan" && questionType !== "multiple") {
        ay_quiz_data["q7"][`${questionId}`] = formattedAnswer;
      }
      trackJourney(questionEl, questionId);
      window.localStorage.setItem("questionnaire", JSON.stringify(ay_quiz_data));

      // toggle back button
      if (topBackBtn) {
        if (testJourney.length >= 1) {
          topBackBtn.classList.remove("hidden");
        }
        if (testJourney.includes("nightCreamLabel")) {
          topBackBtn.classList.add("hidden");
        }
      }

      // handle dynamic switch of images for skin type question
      if (questionEl && questionId && questionId === "gender") {
          if (answerValue) {
            if (answerValue === "male") {
              handleDynamicSkinTypeImage(questionEl, false);
            } else if (answerValue === "female" || answerValue === "Nonbinary") {
              handleDynamicSkinTypeImage(questionEl, true);
            }
          }
      }
    }

    function ensureFiringOnce(e, nextBtn, qtrQuestion, ac, questionId, q_type, a_value, a_type, questionIdx, a_text) {
      e.stopPropagation();
      bringScreenToTop();
      if (nextBtn.classList.contains("qtnr__navigation__disabled")) {
        return
      }
      
      goToQuestion(qtrQuestion, ac, questionId, q_type, a_value, a_type);
      if (q_type === "input") {
        gtmSkinTestTrack(questionIdx, questionId, ay_quiz_data["q7"][`${questionId}`], ay_quiz_data["q7"][`${questionId}`]);
      } else if (q_type === "creamLabel") {
        if (questionId === "dayCreamLabel") {
          gtmSkinTestTrack(questionIdx, questionId, ay_quiz_data["q7"]["product"]["name"], ay_quiz_data["q7"]["product"]["name"]);
        } else if (questionId === "nightCreamLabel") {
          gtmSkinTestTrack(questionIdx, questionId, ay_quiz_data["q7"]["nightCremeProduct"]["name"], ay_quiz_data["q7"]["nightCremeProduct"]["name"]);
        }
      } else if (q_type !== "faceScan") {
        gtmSkinTestTrack(questionIdx, questionId, ay_quiz_data["q7"][`${questionId}`], a_text);
      }
      doesQuestionTriggerFirstApiCall(questionId);
      doesQuestionTriggerSecondApiCall(questionId);
      nextBtn.removeEventListener("click", ensureFiringOnce);
    }

    function buildNextBtn(nextBtn, ac, qtrQuestion, questionId, q_type, a_value, a_type, questionIdx) {
      if (!nextBtns.questionId) {
        nextBtns[`${questionId}`] = {}
        nextBtns[`${questionId}`]["nextBtn"] = nextBtn;
        nextBtns[`${questionId}`]["ac"] = ac;
        nextBtns[`${questionId}`]["qtrQuestion"] = qtrQuestion;
        nextBtns[`${questionId}`]["questionId"] = questionId;
        nextBtns[`${questionId}`]["q_type"] = q_type;
        nextBtns[`${questionId}`]["a_value"] = a_value;
        nextBtns[`${questionId}`]["a_type"] = a_type;
        nextBtns[`${questionId}`]["questionIdx"] = questionIdx;
        nextBtns[`${questionId}`]["a_text"] = [];
      }
    }

    function buildSwipableAnswerCounter() {
      let questionEls = document.querySelectorAll(".qtnr__question");
      if (questionEls) {
        questionEls.forEach((el) => {
          if (el.getAttribute("data-question-answer-presentation") === "slides") {
            let counterDiv = document.createElement("div");
            let counterCurrentSpan = document.createElement("span");
            let counterOf = document.createElement("span");
            let counterLengthSpan = document.createElement("span");
            let answerItemEls = el.querySelectorAll(".qtnr__answer__item");
            counterDiv.classList.add("qtnr__answer__item__slide__counter");
            counterCurrentSpan.classList.add("qtnr__answer__item__slide__counter__current");
            counterCurrentSpan.innerText = "1"
            counterOf.innerText = " of ";
            counterLengthSpan.classList.add("qtnr__answer__item__slide__counter__length");
            counterLengthSpan.innerText = `${answerItemEls.length}`;
            counterDiv.appendChild(counterCurrentSpan);
            counterDiv.appendChild(counterOf);
            counterDiv.appendChild(counterLengthSpan);
            el.appendChild(counterDiv);
          }
        });
      }
    }

    function handleSwipe(evt, ac) {
      swipeData = getSwipeDirection(evt);
      // if (swipeData.direction === "left") {
      //   ac.style.transform = `translateX(-${swipeData.xPoint}px)`
      // } else if (swipeData.direction === "right") {
      //   ac.style.transform = `translateX(${swipeData.xPoint}px)`;
      // }
    }

    // handles animation when swiping around a swipable choices
    // swipable choices are question choices to which people can swipe between answers
    // or use the left/right navigation buttons provided
    function handleSwipableAnswer(ac, prevEl, nextEl, direction) {
      let questionEl = ac.closest(".qtnr__question");
      let counterEl = questionEl.querySelector(".qtnr__answer__item__slide__counter");
      let counterCurrentEl = questionEl.querySelector(".qtnr__answer__item__slide__counter__current");
      
      if (direction === "right") {
        if (prevEl) {
          ac.classList.remove("a_slide_left");
          ac.classList.add("a_slide_further_right");
          prevEl.classList.remove("a_slide_further_left");
          prevEl.classList.add("a_slide_right");
        }
        if (counterCurrentEl) {
          counterCurrentEl.innerText = `${parseInt(counterCurrentEl.innerText) - 1}`;
        }
      } else if (direction === "left") {
        if (nextEl) {
          ac.classList.remove("a_slide_left");
          ac.classList.remove("a_slide_right");
          ac.classList.add("a_slide_further_left");
          nextEl.classList.remove("a_slide_further_right");
          nextEl.classList.add("a_slide_left");
        }
        if (counterCurrentEl) {
          counterCurrentEl.innerText = `${parseInt(counterCurrentEl.innerText) + 1}`;
        }
      }
    }

    function trackQuestion() {
      let answerChoices = document.querySelectorAll(".qtnr__answer__item");
      if (answerChoices) {
        answerChoices.forEach(async (ac) => {
          let answerId = ac.getAttribute("data-answer-id");
          let qtrQuestion = ac.closest(".qtnr__question");
          let questionId = qtrQuestion.getAttribute("data-question-id");
          let questionIdx = qtrQuestion.getAttribute("data-question-index");
          let questionMultipleMaxSelection = parseInt(qtrQuestion.getAttribute("data-question-multiple-max-selection"));
          
          let input = ac.querySelector("input");
          let backBtn = qtrQuestion.querySelector(".qtnr__navigation__prev");
          let nextBtn = qtrQuestion.querySelector(".qtnr__navigation__next");
          let q_type = ac.getAttribute("data-question-type");
          let q_regex = ac.getAttribute("data-question-regex");
          let q_answer_presentation = ac.closest(".qtnr__question").getAttribute("data-question-answer-presentation");
          let a_text = ac.getAttribute("data-answer-text");
          let a_type = ac.getAttribute("data-answer-type");
          let a_value = ac.getAttribute("data-answer-value");
          let a_isnota = ac.getAttribute("data-answer-isnota");
          let a_slidenav_left = ac.querySelector(".qtnr__answer__item__slide__navs__left");
          let a_slidenav_right = ac.querySelector(".qtnr__answer__item__slide__navs__right");

          if (q_type === "endScreen") {
            let pdpBtn = document.querySelector(".qtnr__endscreen__pdp_btn");
            if (pdpBtn) {
              pdpBtn.addEventListener("click", () => {
                gtmSkinTestTrack(questionIdx, questionId, "endScreen", "endScreen");
                if (storeCountry === "DE" && storeLocale === "de") {
                  window.location.href = `/products/product-detail-test?skinid=${skinId}&token=${answerAccessToken}`;
                } else if (storeCountry === "DE" && storeLocale === "en") {
                  window.location.href = `/en/products/product-detail-test?skinid=${skinId}&token=${answerAccessToken}`;
                } else {
                  window.location.href = `/${storeLocale}-${storeCountry}/products/product-detail-test?skinid=${skinId}&token=${answerAccessToken}`;
                }
              });
            }
            return;
          }

          // check if disclaimer, then use the defeault answer as value
          if (q_type === "disclaimer") {
            let defVal = qtrQuestion.getAttribute("data-question-default-answer");
            if (defVal) {
              a_value = defVal;
            }
          }

          // Prevent triggering NEXT question
          // when input field is clicked
          if (input) {
            // handle phone requirements
            let numPrefix = ""
            if (questionId === "phoneNumber") {
              input.value = input.value.replace(/\D+/g, '')
                  .replace('', phonePrefixes[storeCountry]);   
              let prevVal = input.value;
              numPrefix = phonePrefixes[storeCountry];
              input.value = numPrefix;
            }

            // handle regex for other types of input except phoneNumber
            // the regex is defined in the question metaobject
            let regExErrorMsgEl = qtrQuestion.querySelector(".qtnr__error_msg");
            input.addEventListener("click", (e) => {
              e.stopPropagation();
            });
            input.addEventListener("input", (e) => {
              // only perform regex checking for input questions other than phoneNumber
              let regex = null;
              if (questionId !== "phoneNumber") {
                if (q_regex) {
                  regex = new RegExp(q_regex);
                }
                if (!regex) {
                  if (e.target.value.length > 0) {
                    nextBtn.classList.remove("qtnr__navigation__disabled");
                  } else {
                    nextBtn.classList.add("qtnr__navigation__disabled");
                  }
                } else {
                  if (!regex.test(e.target.value)) {
                    nextBtn.classList.add("qtnr__navigation__disabled");
                    if (regExErrorMsgEl) {
                      regExErrorMsgEl.classList.remove("hidden");
                    }
                  } else {
                    nextBtn.classList.remove("qtnr__navigation__disabled");
                    if (regExErrorMsgEl) {
                      regExErrorMsgEl.classList.add("hidden");
                    }
                  }
                }
              } else { // if question is phoneNumber, perform different input checking and formatting
                currVal = e.target.value;
                enforcePhoneInput(e, currVal, numPrefix, nextBtn);
              }

              if (q_type === "creamLabel") {
                let labelEl = qtrQuestion.querySelector("label.qtnr__answer__creamLabel__namelabel");
                if (labelEl) {
                  if (e.target.value.length <= 8) {
                    labelEl.innerText = e.target.value;
                  } else {
                    e.target.value = `${e.target.value}`.substring(0, 8)
                  }
                }
                if (questionId.includes("dayCream")) {
                  ay_quiz_data["q7"]["product"] = { name: e.target.value };
                } else if (questionId.includes("nightCream")) {
                  ay_quiz_data["q7"]["nightCremeProduct"] = { name: e.target.value };
                }
              } else {
                ay_quiz_data["q7"][`${questionId}`] = e.target.value;
              }
            });
          }

          // if (backBtn) {
          //   backBtn.addEventListener("click", async (e) => {
          //     e.stopPropagation();
          //     bringScreenToTop();
          //     let _currQuizData = JSON.parse(window.localStorage.getItem("quiz_data"));
          //     _currQuizData["q7"][`${questionId}`] = [];
          //     nextBtn.classList.add("qtnr__navigation__disabled");
          //   });
          // }

          if (nextBtn) {
            if (!nextBtns.questionId) {
              await buildNextBtn(nextBtn, ac, qtrQuestion, questionId, q_type, a_value, a_type, questionIdx)
            }
            //nextBtns[`${questionId}`].addEventListener("click", (e) => ensureFiringOnce(e, nextBtns[`${questionId}`], qtrQuestion, ac, questionId, q_type, a_value, a_type, questionIdx, a_text));
          }

          ac.addEventListener("click", (e) => {
            console.log(swipeData && swipeData.xPoint)
            if (q_type !== "input") {
              // Prevent triggering NEXT question
              // if anywhere in answer container is clicked
              if (q_type && q_type === "faceScan") {
                  e.stopPropagation();
              } else if (q_type && q_type === "multiple") {
                let isMultiAnswerQuestionsStore = multiAnswerQuestions && multiAnswerQuestions[`${questionId}`] ? true : false;
                // ** HANDLE MULTIPLE ANSWER SELECTION **
                handleMultipleAnswers(qtrQuestion, ac, a_value, questionId, questionMultipleMaxSelection, isMultiAnswerQuestionsStore, nextBtn, a_isnota);
              } else {
                bringScreenToTop();
                if (nextBtns.questionId) {
                  nextBtns.questionId.a_text.push(a_text);
                }
                goToQuestion(qtrQuestion, ac, questionId, q_type, a_value, a_type);   
                progressBar(ac, "forward");
                gtmSkinTestTrack(questionIdx, questionId, a_value, a_text);
                doesQuestionTriggerFirstApiCall(questionId);
                doesQuestionTriggerSecondApiCall(questionId);
                
                if (q_answer_presentation === "range") {
                  let currentSelectedAnswer = qtrQuestion.querySelector(".qtnr__answer__item.qtnr__answer__item__selected");
                  if (currentSelectedAnswer) {
                    currentSelectedAnswer.classList.remove("qtnr__answer__item__selected");
                  }
                  ac.classList.add("qtnr__answer__item__selected");
                }
              }
            }
          });

          // handler for swipe events
          // applicable to answers with "slides" presentation
          ac.addEventListener("touchstart", (evt) => {
            handleTouchStart(evt);
          });
          ac.addEventListener("touchmove", (evt) => {
            handleSwipe(evt, ac);
          });
          ac.addEventListener("touchend", (evt) => {
            if (swipeData && swipeData.direction && swipeData.xPoint > 0) {
              let prevEl = ac.previousElementSibling;
              let nextEl = ac.nextElementSibling;
        
              if (swipeData.direction === "left") {
                if (nextEl) {
                  handleSwipableAnswer(ac, prevEl, nextEl, "left");
                }
              } else if (swipeData.direction === "right") {
                if (prevEl) {
                  handleSwipableAnswer(ac, prevEl, nextEl, "right");
                }
              }
              swipeData = undefined;
            }
          });
          if (a_slidenav_left) {
            a_slidenav_left.addEventListener("click", (e) => {
              e.stopPropagation();
              let prevEl = ac.previousElementSibling;
              if (prevEl) {
                handleSwipableAnswer(ac, prevEl, null, "right");
              }
            });
          }
          if (a_slidenav_right) {
            a_slidenav_right.addEventListener("click", (e) => {
              e.stopPropagation();
              let nextEl = ac.nextElementSibling;
              if (nextEl) {
                handleSwipableAnswer(ac, null, nextEl, "left");
              }
            });
          }
        });
      }
    }

    // === DIRECT EVENT LISTENERS
    // toggle top back button
    if (topBackBtn) {
      topBackBtn.addEventListener("click", () => {
        if (testJourney.length >= 1) {
          goBackToQuestion(previousQuestion);
        } else {
          topBackBtn.classList.add("hidden");
        }
        progressBar(null, "backward")
      });
    }
    // show popup
    let popupDetailsBtns = document.querySelectorAll(".qtnr__popup_details__btn");
    if (popupDetailsBtns) {
      popupDetailsBtns.forEach((el) => {
        el.addEventListener("click", () => {
          popupDetailsEl.classList.remove("hidden");
          popupDetailsEl.classList.remove("slide_down");
          popupDetailsEl.classList.add("slide_up");
        });
      });
    }
    // hide popup
    let popupDetailsCloseBtn = popupDetailsEl.querySelector(".popup_details__x");
    popupDetailsCloseBtn.addEventListener("click", () => {
      popupDetailsEl.classList.add("hidden");
      popupDetailsEl.classList.remove("slide_up");
      popupDetailsEl.classList.add("slide_down");
      let contentEl = popupDetailsEl.querySelector(".popup_details__content");
      contentEl.innerHTML = null;
    });
    let disclaimerEls = document.querySelectorAll(".qtnr__disclaimer");
    if (disclaimerEls) {
      disclaimerEls.forEach((el) => {
        let disclaimerTextTrigger = el.querySelector(".qtnr__disclaimer h6");
        disclaimerTextTrigger.addEventListener("click", () => {
          let disclaimerTextEl = el.querySelector(".qtnr__disclaimer__text");
          if (disclaimerTextEl) {
            toggleDisclaimer(disclaimerTextEl);
          }
        });
      });
    }

    // FUNCTION CALLS
    trackQuestion();
    loadPopupDetails();
    // buildCategoryProgress(); // use to build small dots on progress bar for grouped questions
    initializeProgressBar();
    buildSwipableAnswerCounter();

    
    // handle click event for next buttons
    if (nextBtns && Object.keys(nextBtns).length > 0) {
      Object.keys(nextBtns).map((el) => {
        if (nextBtns[el].nextBtn) {
          nextBtns[el].nextBtn.addEventListener("click", (e) => {
            ensureFiringOnce(e, nextBtns[el].nextBtn, nextBtns[el].qtrQuestion, nextBtns[el].ac, nextBtns[el].questionId, nextBtns[el].q_type, nextBtns[el].a_value, nextBtns[el].a_type, nextBtns[el].questionIdx, nextBtns[el].a_text)
            progressBar(nextBtns[el].ac, "forward");
          });
        }
      });
    }
    
  });
</script>
